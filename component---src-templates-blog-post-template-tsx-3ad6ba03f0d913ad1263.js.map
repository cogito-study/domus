{"version":3,"sources":["webpack:///./src/components/slices/blog-post.slices.tsx","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./src/components/slices/related-blog-post.slices.tsx","webpack:///./src/templates/blog-post.template.tsx","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js"],"names":["BlogPostSlices","slices","map","primary","slice_type","color","mt","mb","text","my","src","image","url","alt","loader","enqueue","React","createContext","RelatedBlogPostSlices","console","log","flexDirection","maxWidth","to","blog_post","slug","document","data","hero_image","width","title","query","BlogPostTemplate","justifyContent","prismicBlogPost","body","m","module","exports","require","default","ProdPageRenderer","location","pageResources","createElement","InternalPageRenderer","json"],"mappings":"6IAOaA,EAAwD,SAAC,GAAe,IAAbC,EAAa,EAAbA,OACtE,OACE,oCACGA,EAAOC,IAAI,YAA6B,IAA1BC,EAA0B,EAA1BA,QACb,OADuC,EAAjBC,YAEpB,IAAK,WACH,OACE,kBAAC,IAAD,CAAIC,MAAM,eAAeC,GAAI,EAAGC,GAAI,GACjCJ,EAAQK,KAAKA,MAGpB,IAAK,WACH,OACE,kBAAC,IAAD,CAAIH,MAAM,eAAeC,GAAI,EAAGC,GAAI,GACjCJ,EAAQK,KAAKA,MAGpB,IAAK,OACH,OACE,kBAAC,IAAD,CAAWH,MAAM,cAAcI,GAAI,GAChCN,EAAQK,KAAKA,MAGpB,IAAK,QACH,OACE,kBAAC,IAAD,CAAKC,GAAI,GACP,yBAAKC,IAAKP,EAAQQ,MAAMC,IAAKC,IAAKV,EAAQQ,MAAME,OAGtD,QACE,OAAO,U,8BCvBMC,QAAOC,QAELC,IAAMC,cAAc,ICRxC,IAAMC,EAAuE,SAAC,GAAe,IAAbjB,EAAa,EAAbA,OAErF,OADAkB,QAAQC,IAAInB,GAEV,kBAAC,IAAD,CAAMK,GAAI,EAAGe,cAAe,CAAC,SAAU,SAAU,MAAO,QACrDpB,EAAOC,IAAI,YAA6B,IAA1BC,EAA0B,EAA1BA,QACb,OADuC,EAAjBC,YAEpB,IAAK,gBACH,OACE,kBAAC,IAAD,CAAKkB,SAAS,SACZ,kBAAC,IAAD,CAAMC,GAAE,SAAWpB,EAAQqB,UAAUC,MACnC,yBACEf,IAAKP,EAAQqB,UAAUE,SAAS,GAAGC,KAAKC,WAAWhB,IACnDC,IAAKV,EAAQqB,UAAUE,SAAS,GAAGC,KAAKC,WAAWf,IACnDgB,MAAM,UAGV,kBAAC,IAAD,CAAIxB,MAAM,cAAcC,GAAI,GACzBH,EAAQqB,UAAUE,SAAS,GAAGC,KAAKG,MAAMtB,OAIlD,QACE,OAAO,UC9BnB,oCAYA,IAkBauB,EAAQ,aAwENC,UA1F4C,SAAC,GAAa,IAAXL,EAAW,EAAXA,KAC5D,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAMM,eAAe,UACnB,kBAAC,IAAD,CAAKX,SAAS,SACZ,kBAAC,IAAD,CAAIf,GAAI,EAAGD,GAAI,EAAGD,MAAM,gBACrBsB,EAAKO,gBAAgBP,KAAKG,MAAMtB,MAEnC,kBAAC,EAAD,CAAgBP,OAAQ0B,EAAKO,gBAAgBP,KAAKQ,OAClD,kBAAC,EAAD,CAAuBlC,OAAQ0B,EAAKO,gBAAgBP,KAAKQ,a,oBCtBrE,IAAsBC,EAKpBC,EAAOC,SALaF,EAKWG,EAAQ,OALRH,EAAEI,SAAYJ,G,0ECsBhCK,UAjBU,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,cACpC,OAAKA,EAGE3B,IAAM4B,cAAcC,IAApB,eACLH,WACAC,iBACGA,EAAcG,OALV","file":"component---src-templates-blog-post-template-tsx-3ad6ba03f0d913ad1263.js","sourcesContent":["import React, { FunctionComponent } from 'react';\nimport { Box, H3, H2, Paragraph } from '@cogito-study/alea';\n\ninterface BlogPostSliceProps {\n  slices: any[];\n}\n\nexport const BlogPostSlices: FunctionComponent<BlogPostSliceProps> = ({ slices }) => {\n  return (\n    <>\n      {slices.map(({ primary, slice_type }) => {\n        switch (slice_type) {\n          case 'header_1':\n            return (\n              <H2 color=\"primary.dark\" mt={5} mb={4}>\n                {primary.text.text}\n              </H2>\n            );\n          case 'header_2':\n            return (\n              <H3 color=\"primary.dark\" mt={5} mb={4}>\n                {primary.text.text}\n              </H3>\n            );\n          case 'text':\n            return (\n              <Paragraph color=\"grey.dark.3\" my={4}>\n                {primary.text.text}\n              </Paragraph>\n            );\n          case 'image':\n            return (\n              <Box my={7}>\n                <img src={primary.image.url} alt={primary.image.alt} />\n              </Box>\n            );\n          default:\n            return null;\n        }\n      })}\n    </>\n  );\n};\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","import { Box, Flex, H4 } from '@cogito-study/alea';\nimport { Link } from 'gatsby';\nimport React, { FunctionComponent } from 'react';\n\ninterface RelatedBlogPostSlicesProps {\n  slices: any[];\n}\n\nexport const RelatedBlogPostSlices: FunctionComponent<RelatedBlogPostSlicesProps> = ({ slices }) => {\n  console.log(slices);\n  return (\n    <Flex mt={9} flexDirection={['column', 'column', 'row', 'row']}>\n      {slices.map(({ primary, slice_type }) => {\n        switch (slice_type) {\n          case 'related_posts':\n            return (\n              <Box maxWidth=\"360px\">\n                <Link to={`/blog/${primary.blog_post.slug}`}>\n                  <img\n                    src={primary.blog_post.document[0].data.hero_image.url}\n                    alt={primary.blog_post.document[0].data.hero_image.alt}\n                    width=\"100%\"\n                  />\n                </Link>\n                <H4 color=\"grey.dark.2\" mt={4}>\n                  {primary.blog_post.document[0].data.title.text}\n                </H4>\n              </Box>\n            );\n          default:\n            return null;\n        }\n      })}\n    </Flex>\n  );\n};\n","import { Box, Flex, H1 } from '@cogito-study/alea';\r\nimport { graphql } from 'gatsby';\r\nimport React, { FunctionComponent } from 'react';\r\nimport { Container } from '../components/container';\r\nimport { Layout } from '../components/layout';\r\nimport { BlogPostSlices } from '../components/slices/blog-post.slices';\r\nimport { RelatedBlogPostSlices } from '../components/slices/related-blog-post.slices';\r\n\r\ninterface BlogPostProps {\r\n  data: any;\r\n}\r\n\r\nconst BlogPostTemplate: FunctionComponent<BlogPostProps> = ({ data }) => {\r\n  return (\r\n    <Layout>\r\n      <Container>\r\n        <Flex justifyContent=\"center\">\r\n          <Box maxWidth=\"500px\">\r\n            <H1 mb={6} mt={9} color=\"primary.dark\">\r\n              {data.prismicBlogPost.data.title.text}\r\n            </H1>\r\n            <BlogPostSlices slices={data.prismicBlogPost.data.body} />\r\n            <RelatedBlogPostSlices slices={data.prismicBlogPost.data.body} />\r\n          </Box>\r\n        </Flex>\r\n      </Container>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport const query = graphql`\r\n  query PostBySlug($uid: String!) {\r\n    prismicBlogPost(slugs: { eq: $uid }) {\r\n      data {\r\n        content {\r\n          text\r\n        }\r\n        title {\r\n          text\r\n        }\r\n        hero_image {\r\n          url\r\n        }\r\n        body {\r\n          ... on PrismicBlogPostBodyHeader1 {\r\n            primary {\r\n              text {\r\n                text\r\n              }\r\n            }\r\n            slice_type\r\n          }\r\n          ... on PrismicBlogPostBodyHeader2 {\r\n            primary {\r\n              text {\r\n                text\r\n              }\r\n            }\r\n            slice_type\r\n          }\r\n          ... on PrismicBlogPostBodyText {\r\n            primary {\r\n              text {\r\n                text\r\n              }\r\n            }\r\n            slice_type\r\n          }\r\n          ... on PrismicBlogPostBodyImage {\r\n            primary {\r\n              image {\r\n                url\r\n                alt\r\n              }\r\n            }\r\n            slice_type\r\n          }\r\n          ... on PrismicBlogPostBodyRelatedPosts {\r\n            slice_type\r\n            primary {\r\n              blog_post {\r\n                slug\r\n                document {\r\n                  data {\r\n                    title {\r\n                      text\r\n                    }\r\n                    hero_image {\r\n                      url\r\n                      alt\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default BlogPostTemplate;\r\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n"],"sourceRoot":""}