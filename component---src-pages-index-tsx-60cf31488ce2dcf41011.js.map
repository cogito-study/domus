{"version":3,"sources":["webpack:///./src/pages/index.tsx","webpack:///./src/components/sections/feature.section.tsx","webpack:///./src/components/sections/use-case.section.tsx","webpack:///./src/components/sections/hero.section.tsx","webpack:///./src/components/sections/customer.section.tsx","webpack:///./src/components/sections/partner.section.tsx","webpack:///./src/components/sections/try-out.section.tsx","webpack:///./src/components/container.tsx","webpack:///./src/components/sections/achievement.section.tsx","webpack:///./src/components/sections/team.section.tsx","webpack:///./src/components/sections/index.ts","webpack:///./src/components/SEO/facebook.tsx","webpack:///./src/components/SEO/twitter.tsx","webpack:///./src/components/SEO/index.tsx"],"names":["__webpack_require__","r","__webpack_exports__","d","query","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_cogito_study_alea__WEBPACK_IMPORTED_MODULE_1__","_components_layout__WEBPACK_IMPORTED_MODULE_2__","_components_SEO__WEBPACK_IMPORTED_MODULE_3__","_components_sections__WEBPACK_IMPORTED_MODULE_4__","Index","_ref","data","allPrismicHome","_node$data","edges","node","motto","subtitle","description","call_to_action","customers_heading","console","log","a","createElement","text","color","textAlign","title","FeatureSection","_1427245489","allPrismicHomeBodyFeature","react_default","dist","flexDirection","map","index","primary","key","UseCaseSection","_3805997447","allPrismicHomeBodyUseCase","border","HeroSection","alignItems","CustomerSection","_2752567655","allPrismicHomeBodyCustomer","_ref2","name","PartnerSection","_3470217090","allPrismicHomeBodyPartner","link","href","url","TryOutSection","_4149467383","allPrismicHomeBodyTryOut","bg","image","image_description","Fragment","src","alt","paragraphSize","Container","children","px","mx","maxWidth","AchievementSection","_960497202","allPrismicAboutBodyAchievements","container_Container","mt","mb","order","icon","ml","width","height","TeamSection","_2085727214","allPrismicAboutBodyProfile","gridGap","gridTemplateColumns","style","objectFit","position","feature_section_FeatureSection","use_case_section_UseCaseSection","hero_section_HeroSection","customer_section_CustomerSection","partner_section_PartnerSection","try_out_section_TryOutSection","achievement_section_AchievementSection","team_section_TeamSection","Facebook","desc","locale","type","Helmet_default","property","content","defaultProps","Twitter","username","SEO","banner","pathname","individual","site","_660294840","buildTime","_site$siteMetadata","siteMetadata","siteUrl","defaultTitle","defaultDescription","defaultBanner","headline","siteLanguage","ogLanguage","author","twitter","facebook","seo","schemaOrgWebPage","@context","@type","inLanguage","mainEntityOfPage","copyrightHolder","copyrightYear","creator","publisher","datePublished","dateModified","itemListElement","item","@id","schemaArticle","logo","birthTime","modifiedTime","push","breadcrumb","lang","JSON","stringify","SEO_facebook","SEO_twitter"],"mappings":"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","file":"component---src-pages-index-tsx-60cf31488ce2dcf41011.js","sourcesContent":["import React, { FunctionComponent } from 'react';\nimport { H1, Box, H2 } from '@cogito-study/alea';\nimport { Layout } from '../components/layout';\nimport SEO from '../components/SEO';\nimport { graphql } from 'gatsby';\nimport {\n  HeroSection,\n  FeatureSection,\n  UseCaseSection,\n  CustomerSection,\n  PartnerSection,\n  TryOutSection,\n} from '../components/sections';\nimport { IndexQuery } from '../generated/graphql-types';\n\ninterface IndexProps {\n  data: IndexQuery;\n}\n\nconst Index: FunctionComponent<IndexProps> = ({ data }) => {\n  if (!data.allPrismicHome) return undefined;\n\n  const { node } = data.allPrismicHome.edges[0];\n  const { motto, subtitle, description, call_to_action, customers_heading } = node.data;\n\n  console.log(call_to_action);\n\n  return (\n    <Layout>\n      <SEO />\n      <HeroSection motto={motto.text} subtitle={subtitle.text} description={description.text} />\n      <UseCaseSection />\n      <FeatureSection />\n      <H2 color=\"grey.dark.2\" textAlign=\"center\">\n        {call_to_action.text}\n      </H2>\n      <CustomerSection title={customers_heading.text} />\n      <PartnerSection />\n      <TryOutSection />\n    </Layout>\n  );\n};\n\nexport const query = graphql`\n  query Index {\n    allPrismicHome {\n      edges {\n        node {\n          lang\n          data {\n            subtitle {\n              text\n            }\n            call_to_action {\n              text\n            }\n            customers_heading {\n              text\n            }\n            description {\n              text\n            }\n            motto {\n              text\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport default Index;\n","import { Flex, H3, Paragraph } from '@cogito-study/alea';\nimport { graphql, useStaticQuery } from 'gatsby';\nimport React from 'react';\nimport { FeatureQuery } from '../../generated/graphql-types';\n\nexport const FeatureSection = () => {\n  const data = useStaticQuery<FeatureQuery>(graphql`\n    query Feature {\n      allPrismicHomeBodyFeature {\n        edges {\n          node {\n            primary {\n              description {\n                text\n              }\n              title {\n                text\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  if (!data.allPrismicHomeBodyFeature) return null;\n\n  return (\n    <Flex flexDirection=\"column\">\n      {data.allPrismicHomeBodyFeature.edges.map(({ node: { primary } }, index) => (\n        <Flex key={index} flexDirection=\"row\">\n          {primary && primary.title && <H3 color=\"grey.dark.3\">{primary.title.text}</H3>}\n          {primary && primary.description && <Paragraph color=\"grey.dark.3\">{primary.description.text}</Paragraph>}\n        </Flex>\n      ))}\n    </Flex>\n  );\n};\n","import { Flex, H3, Paragraph } from '@cogito-study/alea';\nimport { graphql, useStaticQuery } from 'gatsby';\nimport React from 'react';\nimport { UseCaseQuery } from '../../generated/graphql-types';\n\nexport const UseCaseSection = () => {\n  const data = useStaticQuery<UseCaseQuery>(graphql`\n    query UseCase {\n      allPrismicHomeBodyUseCase {\n        edges {\n          node {\n            primary {\n              description {\n                text\n              }\n              title {\n                text\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  if (!data.allPrismicHomeBodyUseCase) return null;\n\n  return (\n    <Flex>\n      {data.allPrismicHomeBodyUseCase.edges.map(({ node: { primary } }, index) => (\n        <Flex key={index} flexDirection=\"column\" border=\"2px solid red\">\n          {primary && primary.title && <H3 color=\"primary.normal\">{primary.title.text}</H3>}\n          {primary && primary.description && <Paragraph color=\"grey.dark.3\">{primary.description.text}</Paragraph>}\n        </Flex>\n      ))}\n    </Flex>\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport { Box, H1, Flex, H4, H3 } from '@cogito-study/alea';\n\ninterface HeroSectionProps {\n  motto: string;\n  description: string;\n  subtitle: string;\n}\n\nexport const HeroSection: FunctionComponent<HeroSectionProps> = ({ motto, description, subtitle }) => (\n  <Flex flexDirection=\"column\" alignItems=\"center\">\n    <Flex flexDirection=\"row\">\n      <Box>\n        <H1 color=\"primary.dark\">{motto}</H1>\n      </Box>\n      <Flex flexDirection=\"column\">\n        <Box>\n          <H4 color=\"grey.dark.3\">{description}</H4>\n        </Box>\n      </Flex>\n    </Flex>\n\n    <Box>\n      <H3 color=\"grey.dark.2\">{subtitle}</H3>\n    </Box>\n  </Flex>\n);\n","import React, { FunctionComponent } from 'react';\nimport { Flex, H2, H4 } from '@cogito-study/alea';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { CustomerQuery } from '../../generated/graphql-types';\n\ninterface CustomerSectionProps {\n  title: string;\n}\n\nexport const CustomerSection: FunctionComponent<CustomerSectionProps> = ({ title }) => {\n  const data = useStaticQuery<CustomerQuery>(graphql`\n    query Customer {\n      allPrismicHomeBodyCustomer {\n        edges {\n          node {\n            primary {\n              name {\n                text\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  if (!data.allPrismicHomeBodyCustomer) return null;\n\n  return (\n    <Flex>\n      <H2 color=\"grey.dark.1\">{title}</H2>\n      {data.allPrismicHomeBodyCustomer.edges.map(\n        ({ node: { primary } }, index) =>\n          primary &&\n          primary.name && (\n            <H4 key={index} color=\"grey.dark.1\">\n              {primary.name.text}\n            </H4>\n          ),\n      )}\n    </Flex>\n  );\n};\n","import { Anchor, Flex } from '@cogito-study/alea';\nimport { graphql, useStaticQuery } from 'gatsby';\nimport React from 'react';\nimport { PartnerQuery } from '../../generated/graphql-types';\n\nexport const PartnerSection = () => {\n  const data = useStaticQuery<PartnerQuery>(graphql`\n    query Partner {\n      allPrismicHomeBodyPartner {\n        edges {\n          node {\n            primary {\n              name {\n                text\n              }\n              link {\n                url\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  if (!data.allPrismicHomeBodyPartner) return null;\n  return (\n    <Flex>\n      {data.allPrismicHomeBodyPartner.edges.map(({ node: { primary } }, index) => {\n        if (primary && primary.link && primary.name)\n          return (\n            <Anchor key={index} href={primary.link.url}>\n              {primary.name.text}\n            </Anchor>\n          );\n      })}\n    </Flex>\n  );\n};\n","import { Flex, H2, Paragraph } from '@cogito-study/alea';\nimport { graphql, useStaticQuery } from 'gatsby';\nimport React from 'react';\nimport { TryOutQuery } from '../../generated/graphql-types';\n\nexport const TryOutSection = () => {\n  const data = useStaticQuery<TryOutQuery>(graphql`\n    query TryOut {\n      allPrismicHomeBodyTryOut {\n        edges {\n          node {\n            primary {\n              image {\n                url\n                alt\n              }\n              image_description {\n                text\n              }\n              subtitle {\n                text\n              }\n              title {\n                text\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  if (!data.allPrismicHomeBodyTryOut) return null;\n\n  return (\n    <Flex bg=\"primary.normal\">\n      {data.allPrismicHomeBodyTryOut.edges.map(({ node: { primary } }) => {\n        if (primary) {\n          const { image, image_description, subtitle, title } = primary;\n\n          return (\n            <>\n              <Flex flexDirection=\"column\">\n                {image && image.url && <img src={image.url} alt={image.alt || ''} />}\n                {image_description && <Paragraph color=\"grey.light.4\">{image_description.text}</Paragraph>}\n              </Flex>\n              <Flex flexDirection=\"column\">\n                {title && <H2 color=\"grey.light.4\">{title.text}</H2>}\n                {subtitle && (\n                  <Paragraph paragraphSize=\"large\" color=\"grey.light.4\">\n                    {subtitle.text}\n                  </Paragraph>\n                )}\n              </Flex>\n            </>\n          );\n        }\n      })}\n    </Flex>\n  );\n};\n","import { Box } from '@cogito-study/alea';\r\nimport React, { FunctionComponent } from 'react';\r\n\r\nexport const Container: FunctionComponent = ({ children }) => {\r\n  return (\r\n    <Box px={[1, 4, 0]} mx=\"auto\" maxWidth={[\"100%\", \"640px\", \"640px\", \"1024px\"]}>\r\n      {children}\r\n    </Box>\r\n  );\r\n};\r\n","import { Box, Flex, H2, H3, Paragraph } from '@cogito-study/alea';\nimport { graphql, useStaticQuery } from 'gatsby';\nimport React, { FunctionComponent } from 'react';\nimport { AchievementQuery } from '../../generated/graphql-types';\nimport { Container } from '../container';\n\ninterface AchievementSectionProps {\n  title: string;\n}\n\nexport const AchievementSection: FunctionComponent<AchievementSectionProps> = ({ title }) => {\n  const data = useStaticQuery<AchievementQuery>(graphql`\n    query Achievement {\n      allPrismicAboutBodyAchievements {\n        edges {\n          node {\n            primary {\n              name {\n                text\n              }\n              description {\n                text\n              }\n              icon {\n                url\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  if (!data.allPrismicAboutBodyAchievements) return null;\n\n  return (\n    <Container>\n      <H2 color=\"grey.dark.3\" mt={9} mb={7}>\n        {title}\n      </H2>\n      {data.allPrismicAboutBodyAchievements.edges.map(({ node: { primary } }) => (\n        <Flex flexDirection={['column', 'row']} alignItems=\"center\" mb={7}>\n          <Box order={[2, 0]} maxWidth=\"600px\">\n            <H3 color=\"grey.dark.2\" mt={0} mb={5}>\n              {primary.name.text}\n            </H3>\n            <Paragraph color=\"grey.dark.2\" mt={0} paragraphSize=\"medium\">\n              {primary.description.text}\n            </Paragraph>\n          </Box>\n          {primary.icon.url && (\n            <Box order={[1, 0]} ml={[0, 9]} width=\"180px\" height=\"180px\">\n              <img src={primary.icon.url} />\n            </Box>\n          )}\n        </Flex>\n      ))}\n    </Container>\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport { Box, H1, H2, H3, Grid, Paragraph } from '@cogito-study/alea';\nimport { graphql, useStaticQuery } from 'gatsby';\nimport { TeamQuery } from '../../generated/graphql-types';\nimport { Container } from '../container';\n\ninterface TeamSectionProps {\n  title: string;\n  subtitle: string;\n}\n\nexport const TeamSection: FunctionComponent<TeamSectionProps> = ({ title, subtitle }) => {\n  const data = useStaticQuery<TeamQuery>(graphql`\n    query Team {\n      allPrismicAboutBodyProfile {\n        edges {\n          node {\n            primary {\n              image {\n                url\n              }\n              name {\n                text\n              }\n              position {\n                text\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  if (!data.allPrismicAboutBodyProfile) return null;\n\n  return (\n    <Container>\n      <H1 color=\"primary.dark\">{title}</H1>\n      <H2 color=\"grey.dark.3\">{subtitle}</H2>\n      <Grid gridGap={5} gridTemplateColumns={['1fr 1fr', '1fr 1fr 1fr 1fr', '1fr 1fr 1fr 1fr', '1fr 1fr 1fr']}>\n        {data.allPrismicAboutBodyProfile.edges.map(({ node: { primary } }) => (\n          <Box>\n            <Box height={['140px', '140px', '140px', '300px']}>\n              <img src={primary.image.url} width=\"100%\" height=\"100%\" style={{ objectFit: 'cover' }} />\n            </Box>\n            <H3 mb={1} mt={2} color=\"primary.dark\">\n              {primary.name.text}\n            </H3>\n            <Paragraph mb={6} mt={0} color=\"grey.normal\">\n              {primary.position.text}\n            </Paragraph>\n          </Box>\n        ))}\n      </Grid>\n    </Container>\n  );\n};\n","export * from './feature.section';\nexport * from './use-case.section';\nexport * from './hero.section';\nexport * from './customer.section';\nexport * from './partner.section';\nexport * from './try-out.section';\nexport * from './achievement.section';\nexport * from './team.section';\n","import React from 'react'\r\nimport Helmet from 'react-helmet'\r\n\r\ntype Props = { url: string; title: string; desc: string; image: string; locale: string } & typeof defaultProps\r\n\r\nconst defaultProps = {\r\n  name: '',\r\n  type: 'website',\r\n}\r\n\r\nconst Facebook = ({ url, title, desc, image, locale, name, type }: Props) => (\r\n  <Helmet>\r\n    {name && <meta property=\"og:site_name\" content={name} />}\r\n    <meta property=\"og:locale\" content={locale} />\r\n    <meta property=\"og:url\" content={url} />\r\n    <meta property=\"og:type\" content={type} />\r\n    <meta property=\"og:title\" content={title} />\r\n    <meta property=\"og:description\" content={desc} />\r\n    <meta property=\"og:image\" content={image} />\r\n    <meta property=\"og:image:alt\" content={desc} />\r\n  </Helmet>\r\n)\r\n\r\nFacebook.defaultProps = defaultProps\r\n\r\nexport default Facebook\r\n","import React from 'react'\r\nimport Helmet from 'react-helmet'\r\n\r\ntype Props = { title: string; desc: string; image: string } & typeof defaultProps\r\n\r\nconst defaultProps = {\r\n  username: '',\r\n}\r\n\r\nconst Twitter = ({ username, title, desc, image }: Props) => (\r\n  <Helmet>\r\n    {username && <meta name=\"twitter:creator\" content={username} />}\r\n    <meta name=\"twitter:card\" content=\"summary_large_image\" />\r\n    <meta name=\"twitter:title\" content={title} />\r\n    <meta name=\"twitter:description\" content={desc} />\r\n    <meta name=\"twitter:image\" content={image} />\r\n    <meta name=\"twitter:image:alt\" content={desc} />\r\n  </Helmet>\r\n)\r\n\r\nexport default Twitter\r\n\r\nTwitter.defaultProps = defaultProps\r\n","import React from 'react'\r\nimport Helmet from 'react-helmet'\r\nimport { useStaticQuery, graphql } from 'gatsby'\r\nimport Facebook from './facebook'\r\nimport Twitter from './twitter'\r\n\r\ntype Props = {} & typeof defaultProps\r\n\r\nconst defaultProps = {\r\n  title: '',\r\n  desc: '',\r\n  banner: '',\r\n  pathname: '',\r\n  node: {\r\n    modifiedTime: '',\r\n    birthTime: '',\r\n  },\r\n  individual: false,\r\n}\r\n\r\nconst SEO = ({ title, desc, banner, pathname, node, individual }: Props) => {\r\n  const { site } = useStaticQuery(query)\r\n\r\n  const {\r\n    buildTime,\r\n    siteMetadata: {\r\n      siteUrl,\r\n      defaultTitle,\r\n      defaultDescription,\r\n      defaultBanner,\r\n      headline,\r\n      siteLanguage,\r\n      ogLanguage,\r\n      author,\r\n      twitter,\r\n      facebook,\r\n    },\r\n  } = site\r\n\r\n  const seo = {\r\n    title: title || defaultTitle,\r\n    description: desc || defaultDescription,\r\n    image: `${siteUrl}${banner || defaultBanner}`,\r\n    url: `${siteUrl}${pathname || ''}`,\r\n  }\r\n\r\n  // schema.org in JSONLD format\r\n  // https://developers.google.com/search/docs/guides/intro-structured-data\r\n  // You can fill out the 'author', 'creator' with more data or another type (e.g. 'Organization')\r\n\r\n  const schemaOrgWebPage = {\r\n    '@context': 'http://schema.org',\r\n    '@type': 'WebPage',\r\n    url: siteUrl,\r\n    headline,\r\n    inLanguage: siteLanguage,\r\n    mainEntityOfPage: siteUrl,\r\n    description: defaultDescription,\r\n    name: defaultTitle,\r\n    author: {\r\n      '@type': 'Person',\r\n      name: author,\r\n    },\r\n    copyrightHolder: {\r\n      '@type': 'Person',\r\n      name: author,\r\n    },\r\n    copyrightYear: '2019',\r\n    creator: {\r\n      '@type': 'Person',\r\n      name: author,\r\n    },\r\n    publisher: {\r\n      '@type': 'Person',\r\n      name: author,\r\n    },\r\n    datePublished: '2019-03-10T10:30:00+01:00',\r\n    dateModified: buildTime,\r\n    image: {\r\n      '@type': 'ImageObject',\r\n      url: `${siteUrl}${defaultBanner}`,\r\n    },\r\n  }\r\n\r\n  // Initial breadcrumb list\r\n\r\n  const itemListElement = [\r\n    {\r\n      '@type': 'ListItem',\r\n      item: {\r\n        '@id': siteUrl,\r\n        name: 'Homepage',\r\n      },\r\n      position: 1,\r\n    },\r\n    {\r\n      '@type': 'ListItem',\r\n      item: {\r\n        '@id': `${siteUrl}/about`,\r\n        name: 'About',\r\n      },\r\n      position: 2,\r\n    },\r\n    {\r\n      '@type': 'ListItem',\r\n      item: {\r\n        '@id': `${siteUrl}/projects`,\r\n        name: 'About',\r\n      },\r\n      position: 3,\r\n    },\r\n    {\r\n      '@type': 'ListItem',\r\n      item: {\r\n        '@id': `${siteUrl}/instagram`,\r\n        name: 'About',\r\n      },\r\n      position: 4,\r\n    },\r\n  ]\r\n\r\n  let schemaArticle = null\r\n\r\n  if (individual) {\r\n    schemaArticle = {\r\n      '@context': 'http://schema.org',\r\n      '@type': 'Article',\r\n      author: {\r\n        '@type': 'Person',\r\n        name: author,\r\n      },\r\n      copyrightHolder: {\r\n        '@type': 'Person',\r\n        name: author,\r\n      },\r\n      copyrightYear: '2019',\r\n      creator: {\r\n        '@type': 'Person',\r\n        name: author,\r\n      },\r\n      publisher: {\r\n        '@type': 'Organization',\r\n        name: author,\r\n        logo: {\r\n          '@type': 'ImageObject',\r\n          url: `${siteUrl}${defaultBanner}`,\r\n        },\r\n      },\r\n      datePublished: node ? node.birthTime : '2019-03-10T10:30:00+01:00',\r\n      dateModified: node ? node.modifiedTime : '2019-03-10T10:30:00+01:00',\r\n      description: seo.description,\r\n      headline: seo.title,\r\n      inLanguage: 'en',\r\n      url: seo.url,\r\n      name: seo.title,\r\n      image: {\r\n        '@type': 'ImageObject',\r\n        url: seo.image,\r\n      },\r\n      mainEntityOfPage: seo.url,\r\n    }\r\n    // Push current blogpost into breadcrumb list\r\n    itemListElement.push({\r\n      '@type': 'ListItem',\r\n      item: {\r\n        '@id': seo.url,\r\n        name: seo.title,\r\n      },\r\n      position: 5,\r\n    })\r\n  }\r\n\r\n  const breadcrumb = {\r\n    '@context': 'http://schema.org',\r\n    '@type': 'BreadcrumbList',\r\n    description: 'Breadcrumbs list',\r\n    name: 'Breadcrumbs',\r\n    itemListElement,\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Helmet title={seo.title}>\r\n        <html lang={siteLanguage} />\r\n        <meta name=\"description\" content={seo.description} />\r\n        <meta name=\"image\" content={seo.image} />\r\n        <meta name=\"gatsby-starter\" content=\"Gatsby Starter Portfolio Jodie\" />\r\n        {/* Insert schema.org data conditionally (webpage/article) + everytime (breadcrumbs) */}\r\n        {!individual && <script type=\"application/ld+json\">{JSON.stringify(schemaOrgWebPage)}</script>}\r\n        {individual && <script type=\"application/ld+json\">{JSON.stringify(schemaArticle)}</script>}\r\n        <script type=\"application/ld+json\">{JSON.stringify(breadcrumb)}</script>\r\n      </Helmet>\r\n      <Facebook\r\n        desc={seo.description}\r\n        image={seo.image}\r\n        title={seo.title}\r\n        type={individual ? 'article' : 'website'}\r\n        url={seo.url}\r\n        locale={ogLanguage}\r\n        name={facebook}\r\n      />\r\n      <Twitter title={seo.title} image={seo.image} desc={seo.description} username={twitter} />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SEO\r\n\r\nSEO.defaultProps = defaultProps\r\n\r\nconst query = graphql`\r\n  query SEO {\r\n    site {\r\n      buildTime(formatString: \"YYYY-MM-DD\")\r\n      siteMetadata {\r\n        siteUrl\r\n        defaultTitle: titleAlt\r\n        defaultDescription: description\r\n        defaultBanner: logo\r\n        headline\r\n        siteLanguage\r\n        ogLanguage\r\n        author\r\n        twitter\r\n        facebook\r\n      }\r\n    }\r\n  }\r\n`\r\n"],"sourceRoot":""}