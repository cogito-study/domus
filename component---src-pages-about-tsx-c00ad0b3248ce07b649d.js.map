{"version":3,"sources":["webpack:///./src/pages/about.tsx","webpack:///./src/components/container.tsx","webpack:///./src/components/sections/feature.section.tsx","webpack:///./src/components/sections/use-case.section.tsx","webpack:///./src/components/sections/hero.section.tsx","webpack:///./src/components/sections/customer.section.tsx","webpack:///./src/components/sections/partner.section.tsx","webpack:///./src/components/sections/try-out.section.tsx","webpack:///./src/components/sections/achievement.section.tsx","webpack:///./src/components/sections/team.section.tsx","webpack:///./src/components/sections/index.ts","webpack:///./src/components/SEO/facebook.tsx","webpack:///./src/components/SEO/twitter.tsx","webpack:///./src/components/SEO/index.tsx"],"names":["__webpack_require__","r","__webpack_exports__","d","query","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_components_layout__WEBPACK_IMPORTED_MODULE_1__","_components_SEO__WEBPACK_IMPORTED_MODULE_2__","_components_sections__WEBPACK_IMPORTED_MODULE_3__","About","_ref","_node$data","data","allPrismicAbout","edges","node","title","subtitle","achievement_header","a","createElement","text","Container","_cogito_study_alea__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_1___default","children","px","mx","maxWidth","FeatureSection","_2647555799","allPrismicHomeBodyFeature","react_default","dist","flexDirection","alignItems","map","index","primary","key","justifyContent","my","width","image","alt","src","url","ml","mt","color","description","variant","UseCaseSection","_1863550402","allPrismicHomeBodyUseCase","flexWrap","backgroundColor","pb","pt","border","borderColor","minWidth","icon","height","HeroSection","motto","mb","placeholder","help","textAlign","CustomerSection","_1019783213","allPrismicHomeBodyCustomer","_ref2","name","PartnerSection","_1538204529","allPrismicHomeBodyPartner","py","link","href","logo","TryOutSection","_4149467383","allPrismicHomeBodyTryOut","bg","image_description","container","mr","AchievementSection","_960497202","allPrismicAboutBodyAchievements","order","paragraphSize","TeamSection","_2085727214","allPrismicAboutBodyProfile","gridGap","gridTemplateColumns","style","objectFit","position","feature_section_FeatureSection","use_case_section_UseCaseSection","hero_section_HeroSection","customer_section_CustomerSection","partner_section_PartnerSection","try_out_section_TryOutSection","achievement_section_AchievementSection","team_section_TeamSection","Facebook","desc","locale","type","Helmet_default","property","content","defaultProps","Twitter","username","SEO","banner","pathname","individual","site","_355860074","buildTime","_site$siteMetadata","siteMetadata","siteUrl","defaultTitle","defaultDescription","defaultBanner","headline","siteLanguage","ogLanguage","author","twitter","facebook","seo","schemaOrgWebPage","@context","@type","inLanguage","mainEntityOfPage","copyrightHolder","copyrightYear","creator","publisher","datePublished","dateModified","itemListElement","item","@id","schemaArticle","birthTime","modifiedTime","push","breadcrumb","Fragment","lang","JSON","stringify","SEO_facebook","SEO_twitter"],"mappings":"0FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,0BAAAE,IAAA,IAAAC,EAAAL,EAAA,GAAAM,EAAAN,EAAAO,EAAAF,GAAAG,EAAAR,EAAA,KAAAS,EAAAT,EAAA,KAAAU,EAAAV,EAAA,KA4BaI,EAAK,YAsBHO,UAtC8B,SAAAC,GAAc,IAAAC,EAAAD,EAAXE,KACxBC,gBAAgBC,MAAM,GAApCC,KAC6CH,KAA7CI,EAFiDL,EAEjDK,MAAOC,EAF0CN,EAE1CM,SAAUC,EAFgCP,EAEhCO,mBAEzB,OACEd,EAAAe,EAAAC,cAACd,EAAA,EAAD,KACEF,EAAAe,EAAAC,cAACb,EAAA,EAAD,MACAH,EAAAe,EAAAC,cAACZ,EAAA,EAAD,CAAaQ,MAAOA,EAAMK,KAAMJ,SAAUA,EAASI,OACnDjB,EAAAe,EAAAC,cAACZ,EAAA,EAAD,CAAoBQ,MAAOE,EAAmBG,OAC9CjB,EAAAe,EAAAC,cAACZ,EAAA,EAAD,CAAiBQ,MAAM,KACvBZ,EAAAe,EAAAC,cAACZ,EAAA,EAAD,MACAJ,EAAAe,EAAAC,cAACZ,EAAA,EAAD,0CCvBNV,EAAAG,EAAAD,EAAA,sBAAAsB,IAAA,IAAAC,EAAAzB,EAAA,IAAA0B,EAAA1B,EAAA,GAAA2B,EAAA3B,EAAAO,EAAAmB,GAGaF,EAA+B,SAAAZ,GAAkB,IAAfgB,EAAehB,EAAfgB,SAC7C,OACED,EAAAN,EAAAC,cAACG,EAAA,EAAD,CAAKI,GAAI,CAAC,EAAG,EAAG,GAAIC,GAAG,OAAOC,SAAU,CAAC,OAAQ,QAAS,QAAS,WAChEH,mjOCFMI,EAAiB,WAC5B,IAAMlB,EAAOmB,EAAAnB,KAuBb,OAAKA,EAAKoB,0BAGRC,EAAAd,EAAAC,cAACc,EAAA,EAAD,CAAMC,cAAc,SAASC,WAAY,CAAC,SAAU,SAAU,iBAAkBR,GAAI,CAAC,EAAG,EAAG,EAAG,IAC3FhB,EAAKoB,0BAA0BlB,MAAMuB,IAAI,SAAA3B,EAAwB4B,GAAxB,IAAWC,EAAX7B,EAAGK,KAAQwB,QAAX,OACxCN,EAAAd,EAAAC,cAACc,EAAA,EAAD,CACEM,IAAKF,EACLH,cACEG,EAAQ,GAAK,EAAI,CAAC,SAAU,SAAU,cAAe,eAAiB,CAAC,SAAU,SAAU,MAAO,OAEpGF,WAAY,CAAC,SAAU,SAAU,iBACjCK,eAAgB,CAAC,SAAU,SAAU,iBACrCC,GAAI,CAAC,EAAG,EAAG,GACXC,MAAO,CAAC,OAAQ,MAAO,OAAQ,SAG/BV,EAAAd,EAAAC,cAACc,EAAA,EAAD,CAAKS,MAAO,CAAC,QAAS,QAAS,QAAS,UACrCJ,GAAWA,EAAQK,OAASX,EAAAd,EAAAC,cAAA,OAAKyB,IAAKN,EAAQK,MAAMC,IAAKC,IAAKP,EAAQK,MAAMG,IAAKJ,MAAM,UAE1FV,EAAAd,EAAAC,cAACc,EAAA,EAAD,CACEC,cAAc,SACdM,eAAe,SACfZ,SAAU,CAAC,OAAQ,OAAQ,QAAS,SACpCmB,GAAIV,EAAQ,GAAK,EAAI,CAAC,GAAK,CAAC,EAAG,EAAG,EAAG,GACrCW,GAAI,CAAC,EAAG,EAAG,EAAG,IAEbV,GAAWA,EAAQvB,OAClBiB,EAAAd,EAAAC,cAACc,EAAA,EAAD,CAAIQ,GAAI,EAAGQ,MAAM,eACdX,EAAQvB,MAAMK,MAGlBkB,GAAWA,EAAQY,aAAelB,EAAAd,EAAAC,cAACc,EAAA,EAAD,CAAWgB,MAAM,eAAeX,EAAQY,YAAY9B,MACvFY,EAAAd,EAAAC,cAACc,EAAA,EAAD,CAAQkB,QAAQ,YAAYvB,SAAS,QAAQoB,GAAI,GAAjD,mBAhCkC,eCxBjCI,EAAiB,WAC5B,IAAMzC,EAAO0C,EAAA1C,KAuBb,OAAKA,EAAK2C,0BAGRtB,EAAAd,EAAAC,cAACc,EAAA,EAAD,CAAMC,cAAc,SAASC,WAAW,UACtCH,EAAAd,EAAAC,cAACc,EAAA,EAAD,CAAMsB,SAAS,OAAOb,MAAO,CAAC,OAAQ,MAAO,QAAS,QAASF,eAAe,UAC3E7B,EAAK2C,0BAA0BzC,MAAMuB,IAAI,SAAA3B,EAAwB4B,GAAxB,IAAWC,EAAX7B,EAAGK,KAAQwB,QAAX,OACxCN,EAAAd,EAAAC,cAACc,EAAA,EAAD,CACEuB,gBAAgB,QAChBjB,IAAKF,EACLH,cAAc,SACdQ,MAAO,CAAC,OAAQ,OAAQ,QAAS,SACjCf,GAAI,CAAC,EAAG,GACRc,GAAI,EACJf,GAAI,CAAC,EAAG,EAAG,EAAG,GACd+B,GAAI,CAAC,EAAG,EAAG,EAAG,GACdC,GAAI,CAAC,EAAG,EAAG,EAAG,GACdvB,WAAW,QACXK,eAAe,gBACfmB,OAAQ,EACRC,YAAY,gBAEZ5B,EAAAd,EAAAC,cAACc,EAAA,EAAD,CAAMC,cAAe,CAAC,MAAO,MAAO,UAAWC,WAAY,CAAC,SAAU,SAAU,UAC9EH,EAAAd,EAAAC,cAACc,EAAA,EAAD,CAAK4B,SAAS,OAAOnB,MAAO,CAAC,OAAQ,OAAQ,OAAQ,UAClDJ,GAAWA,EAAQwB,MAAQ9B,EAAAd,EAAAC,cAAA,OAAKyB,IAAKN,EAAQwB,KAAKlB,IAAKC,IAAKP,EAAQwB,KAAKhB,IAAKJ,MAAM,UAEvFV,EAAAd,EAAAC,cAACc,EAAA,EAAD,CAAM8B,OAAQ,OAAQ5B,WAAW,UAC9BG,GAAWA,EAAQvB,OAClBiB,EAAAd,EAAAC,cAACc,EAAA,EAAD,CAAIQ,GAAI,EAAGd,GAAI,CAAC,EAAG,EAAG,EAAG,GAAIsB,MAAM,gBAChCX,EAAQvB,MAAMK,QAKvBY,EAAAd,EAAAC,cAACc,EAAA,EAAD,CACEe,GAAI,EACJtB,GAAI,CAAC,EAAG,EAAG,EAAG,GACdQ,cAAc,SACd6B,OAAQ,CAAC,OAAQ,OAAQ,QAAS,SAClCvB,eAAe,iBAEfR,EAAAd,EAAAC,cAACc,EAAA,EAAD,CAAMC,cAAc,UACjBI,GAAWA,EAAQY,aAClBlB,EAAAd,EAAAC,cAACc,EAAA,EAAD,CAAWQ,GAAI,EAAGQ,MAAM,eACrBX,EAAQY,YAAY9B,OAI3BY,EAAAd,EAAAC,cAACc,EAAA,EAAD,CAAQkB,QAAQ,YAAYvB,SAAS,QAAQoB,GAAI,GAAjD,mBAORhB,EAAAd,EAAAC,cAACc,EAAA,EAAD,CAAQkB,QAAQ,UAAUvB,SAAS,QAAQoB,GAAI,GAA/C,aAtDwC,MCnBjCgB,EAAmD,SAAAvD,GAAA,IAAGwD,EAAHxD,EAAGwD,MAAOf,EAAVzC,EAAUyC,YAAalC,EAAvBP,EAAuBO,SAAvB,OAC9DgB,EAAAd,EAAAC,cAACc,EAAA,EAAD,CAAMC,cAAc,SAASC,WAAW,SAASa,GAAI,CAAC,EAAG,IAAKU,GAAI,EAAGQ,GAAI,CAAC,EAAG,GAAIvC,GAAI,CAAC,EAAG,EAAG,EAAG,IAC7FK,EAAAd,EAAAC,cAACc,EAAA,EAAD,CAAMC,cAAe,CAAC,SAAU,SAAU,SAAU,OAAQgC,GAAI,CAAC,EAAG,IAClElC,EAAAd,EAAAC,cAACc,EAAA,EAAD,KACED,EAAAd,EAAAC,cAACc,EAAA,EAAD,CAAIgB,MAAM,gBAAgBgB,IAE5BjC,EAAAd,EAAAC,cAACc,EAAA,EAAD,CAAMC,cAAc,SAASc,GAAI,CAAC,EAAG,EAAG,EAAG,IACzChB,EAAAd,EAAAC,cAACc,EAAA,EAAD,KACED,EAAAd,EAAAC,cAACc,EAAA,EAAD,CAAIgB,MAAM,eAAeC,GACzBlB,EAAAd,EAAAC,cAACc,EAAA,EAAD,CAAMC,cAAe,CAAC,SAAU,QAC9BF,EAAAd,EAAAC,cAACc,EAAA,EAAD,CACEkC,YAAY,oBACZC,KAAK,2DACLN,KAAM9B,EAAAd,EAAAC,cAACc,EAAA,EAAD,QAERD,EAAAd,EAAAC,cAACc,EAAA,EAAD,CAAQc,GAAI,CAAC,EAAG,GAAIC,GAAI,CAAC,EAAG,GAAIpB,SAAS,SAAzC,gBAORI,EAAAd,EAAAC,cAACc,EAAA,EAAD,CAAKL,SAAS,SACZI,EAAAd,EAAAC,cAACc,EAAA,EAAD,CAAIe,GAAI,GAAIqB,UAAU,SAASpB,MAAM,eAClCjC,uBCzBIsD,EAA2D,SAAA7D,GAAe,IAAZM,EAAYN,EAAZM,MACnEJ,EAAO4D,EAAA5D,KAoBb,OAAKA,EAAK6D,2BAGRxC,EAAAd,EAAAC,cAACc,EAAA,EAAD,CAAMQ,GAAI,EAAGN,WAAW,SAASK,eAAe,SAASN,cAAe,CAAC,SAAU,SAAU,QAC3FF,EAAAd,EAAAC,cAACc,EAAA,EAAD,CAAKL,SAAU,CAAC,QAAS,UACvBI,EAAAd,EAAAC,cAACc,EAAA,EAAD,CAAIgB,MAAM,cAAciB,GAAI,CAAC,EAAG,IAC7BnD,IAGLiB,EAAAd,EAAAC,cAACc,EAAA,EAAD,CAAMC,cAAe,CAAC,OAAQM,eAAe,SAASL,WAAW,UAC9DxB,EAAK6D,2BAA2B3D,MAAMuB,IACrC,SAAAqC,EAAwBpC,GAAxB,IAAWC,EAAXmC,EAAG3D,KAAQwB,QAAX,OACEA,GACAA,EAAQoC,MACRpC,EAAQwB,MACN9B,EAAAd,EAAAC,cAACc,EAAA,EAAD,CAAMS,MAAO,CAAC,QAAS,QAAS,QAAS,SAAUR,cAAc,SAASP,GAAI,CAAC,EAAG,GAAIQ,WAAW,UAC/FH,EAAAd,EAAAC,cAAA,OAAKuB,MAAM,OAAOH,IAAKF,EAAOQ,IAAKP,EAAQwB,KAAKhB,MAChDd,EAAAd,EAAAC,cAACc,EAAA,EAAD,CAAIM,IAAKF,EAAOY,MAAM,cAAcoB,UAAU,UAC3C/B,EAAQoC,KAAKtD,WAlBe,wBCzBlCuD,EAAiB,WAC5B,IAAMhE,EAAOiE,EAAAjE,KAuBb,OAAKA,EAAKkE,0BAER7C,EAAAd,EAAAC,cAACc,EAAA,EAAD,CAAMO,eAAe,SAASsC,GAAI,EAAGtB,gBAAgB,SACnDxB,EAAAd,EAAAC,cAACc,EAAA,EAAD,CAAMS,MAAO,CAAC,QAAS,QAASF,eAAe,SAASe,SAAS,QAC9D5C,EAAKkE,0BAA0BhE,MAAMuB,IAAI,SAAA3B,EAAwB4B,GAAU,IAAvBC,EAAuB7B,EAA/BK,KAAQwB,QACnD,GAAIA,GAAWA,EAAQyC,MAAQzC,EAAQoC,KACrC,OACE1C,EAAAd,EAAAC,cAACc,EAAA,EAAD,CAAQM,IAAKF,EAAO2C,KAAM1C,EAAQyC,KAAKjC,IAAKnB,GAAI,GAC9CK,EAAAd,EAAAC,cAACc,EAAA,EAAD,CAAKS,MAAO,CAAC,QAAS,QAAS,UAC7BV,EAAAd,EAAAC,cAAA,OAAKuB,MAAM,OAAOG,IAAKP,EAAQ2C,KAAKnC,IAAKF,IAAKN,EAAQoC,KAAKtD,aAT/B,wBCvBjC8D,EAAgB,WAC3B,IAAMvE,EAAOwE,EAAAxE,KA0Bb,OAAKA,EAAKyE,yBAGRpD,EAAAd,EAAAC,cAACc,EAAA,EAAD,CAAMoD,GAAG,gBACN1E,EAAKyE,yBAAyBvE,MAAMuB,IAAI,SAAA3B,GAA2B,IAAhB6B,EAAgB7B,EAAxBK,KAAQwB,QAClD,GAAIA,EAAS,KACHK,EAA8CL,EAA9CK,MAAO2C,EAAuChD,EAAvCgD,kBAAmBtE,EAAoBsB,EAApBtB,SAAUD,EAAUuB,EAAVvB,MAC5C,OACEiB,EAAAd,EAAAC,cAACoE,EAAA,EAAD,KACEvD,EAAAd,EAAAC,cAACc,EAAA,EAAD,CACES,MAAM,OACNR,cAAe,CAAC,SAAU,SAAU,SAAU,OAC9CO,GAAI,EACJD,eAAe,SACfL,WAAW,UAEXH,EAAAd,EAAAC,cAACc,EAAA,EAAD,CAAMC,cAAc,SAASN,SAAS,QAAQsC,GAAI,CAAC,EAAG,EAAG,EAAG,GAAIsB,GAAI,CAAC,EAAG,EAAG,EAAG,IAC3E7C,GAASA,EAAMG,KAAOd,EAAAd,EAAAC,cAAA,OAAK0B,IAAKF,EAAMG,IAAKF,IAAKD,EAAMC,KAAO,KAC7D0C,GACCtD,EAAAd,EAAAC,cAACc,EAAA,EAAD,CAAWQ,GAAI,EAAGQ,MAAM,eAAeoB,UAAU,SAASrB,GAAI,GAC3DsC,EAAkBlE,OAIzBY,EAAAd,EAAAC,cAACc,EAAA,EAAD,CAAMC,cAAc,SAASN,SAAS,QAAQD,GAAI,GAC/CZ,GACCiB,EAAAd,EAAAC,cAACc,EAAA,EAAD,CAAIQ,GAAI,EAAGQ,MAAM,gBACdlC,EAAMK,MAGVJ,GACCgB,EAAAd,EAAAC,cAACc,EAAA,EAAD,CAAWiC,GAAI,EAAGjB,MAAM,gBACrBjC,EAASI,MAGdY,EAAAd,EAAAC,cAACc,EAAA,EAAD,CAAMe,GAAI,EAAGd,cAAe,CAAC,SAAU,QACrCF,EAAAd,EAAAC,cAACc,EAAA,EAAD,CACEkC,YAAY,oBACZC,KAAK,2DACLN,KAAM9B,EAAAd,EAAAC,cAACc,EAAA,EAAD,QAERD,EAAAd,EAAAC,cAACc,EAAA,EAAD,CAAQc,GAAI,CAAC,EAAG,GAAIC,GAAI,CAAC,EAAG,GAAIpB,SAAS,SAAzC,oBAzCyB,eCvBhC6D,EAAiE,SAAAhF,GAAe,IAAZM,EAAYN,EAAZM,MACzEJ,EAAO+E,EAAA/E,KAsBb,OAAKA,EAAKgF,gCAGR3D,EAAAd,EAAAC,cAACoE,EAAA,EAAD,KACEvD,EAAAd,EAAAC,cAACc,EAAA,EAAD,CAAIgB,MAAM,cAAcD,GAAI,EAAGkB,GAAI,GAChCnD,GAEFJ,EAAKgF,gCAAgC9E,MAAMuB,IAAI,SAAAqC,EAAwBpC,GAAxB,IAAWC,EAAXmC,EAAG3D,KAAQwB,QAAX,OAC9CN,EAAAd,EAAAC,cAACc,EAAA,EAAD,CAAMC,cAAe,CAAC,SAAU,OAAQC,WAAW,SAAS+B,GAAI,EAAG3B,IAAKF,GACtEL,EAAAd,EAAAC,cAACc,EAAA,EAAD,CAAK2D,MAAO,CAAC,EAAG,GAAIhE,SAAS,SAC3BI,EAAAd,EAAAC,cAACc,EAAA,EAAD,CAAIgB,MAAM,cAAcD,GAAI,EAAGkB,GAAI,GAChC5B,EAAQoC,KAAKtD,MAEhBY,EAAAd,EAAAC,cAACc,EAAA,EAAD,CAAWgB,MAAM,cAAcD,GAAI,EAAG6C,cAAc,UACjDvD,EAAQY,YAAY9B,OAGxBkB,EAAQwB,KAAKhB,KACZd,EAAAd,EAAAC,cAACc,EAAA,EAAD,CAAK2D,MAAO,CAAC,EAAG,GAAI7C,GAAI,CAAC,EAAG,GAAIL,MAAM,QAAQqB,OAAO,SACnD/B,EAAAd,EAAAC,cAAA,OAAK0B,IAAKP,EAAQwB,KAAKhB,WAnBe,eCtBvCgD,EAAmD,SAAArF,GAAyB,IAAtBM,EAAsBN,EAAtBM,MAAOC,EAAeP,EAAfO,SAClEL,EAAOoF,EAAApF,KAsBb,OAAKA,EAAKqF,2BAGRhE,EAAAd,EAAAC,cAACoE,EAAA,EAAD,KACEvD,EAAAd,EAAAC,cAACc,EAAA,EAAD,CAAIgB,MAAM,gBAAgBlC,GAC1BiB,EAAAd,EAAAC,cAACc,EAAA,EAAD,CAAIgB,MAAM,eAAejC,GACzBgB,EAAAd,EAAAC,cAACc,EAAA,EAAD,CAAMgE,QAAS,EAAGC,oBAAqB,CAAC,UAAW,kBAAmB,kBAAmB,gBACtFvF,EAAKqF,2BAA2BnF,MAAMuB,IAAI,SAAAqC,EAAwBpC,GAAxB,IAAWC,EAAXmC,EAAG3D,KAAQwB,QAAX,OACzCN,EAAAd,EAAAC,cAACc,EAAA,EAAD,CAAKM,IAAKF,GACRL,EAAAd,EAAAC,cAACc,EAAA,EAAD,CAAK8B,OAAQ,CAAC,QAAS,QAAS,QAAS,UACvC/B,EAAAd,EAAAC,cAAA,OAAK0B,IAAKP,EAAQK,MAAMG,IAAKJ,MAAM,OAAOqB,OAAO,OAAOoC,MAAO,CAAEC,UAAW,YAE9EpE,EAAAd,EAAAC,cAACc,EAAA,EAAD,CAAIiC,GAAI,EAAGlB,GAAI,EAAGC,MAAM,gBACrBX,EAAQoC,KAAKtD,MAEhBY,EAAAd,EAAAC,cAACc,EAAA,EAAD,CAAWiC,GAAI,EAAGlB,GAAI,EAAGC,MAAM,eAC5BX,EAAQ+D,SAASjF,WAhBe,MCjC/CvB,EAAAG,EAAAD,EAAA,sBAAAuG,IAAAzG,EAAAG,EAAAD,EAAA,sBAAAwG,IAAA1G,EAAAG,EAAAD,EAAA,sBAAAyG,IAAA3G,EAAAG,EAAAD,EAAA,sBAAA0G,IAAA5G,EAAAG,EAAAD,EAAA,sBAAA2G,IAAA7G,EAAAG,EAAAD,EAAA,sBAAA4G,IAAA9G,EAAAG,EAAAD,EAAA,sBAAA6G,IAAA/G,EAAAG,EAAAD,EAAA,sBAAA8G,qFCUMC,SAAW,SAAArG,GAAA,IAAGqC,EAAHrC,EAAGqC,IAAK/B,EAARN,EAAQM,MAAOgG,EAAftG,EAAesG,KAAMpE,EAArBlC,EAAqBkC,MAAOqE,EAA5BvG,EAA4BuG,OAAQtC,EAApCjE,EAAoCiE,KAAMuC,EAA1CxG,EAA0CwG,KAA1C,OACfjF,EAAAd,EAAAC,cAAC+F,EAAAhG,EAAD,KACGwD,GAAQ1C,EAAAd,EAAAC,cAAA,QAAMgG,SAAS,eAAeC,QAAS1C,IAChD1C,EAAAd,EAAAC,cAAA,QAAMgG,SAAS,YAAYC,QAASJ,IACpChF,EAAAd,EAAAC,cAAA,QAAMgG,SAAS,SAASC,QAAStE,IACjCd,EAAAd,EAAAC,cAAA,QAAMgG,SAAS,UAAUC,QAASH,IAClCjF,EAAAd,EAAAC,cAAA,QAAMgG,SAAS,WAAWC,QAASrG,IACnCiB,EAAAd,EAAAC,cAAA,QAAMgG,SAAS,iBAAiBC,QAASL,IACzC/E,EAAAd,EAAAC,cAAA,QAAMgG,SAAS,WAAWC,QAASzE,IACnCX,EAAAd,EAAAC,cAAA,QAAMgG,SAAS,eAAeC,QAASL,OAI3CD,EAASO,aApBY,CACnB3C,KAAM,GACNuC,KAAM,WAoBOH,QChBTQ,EAAU,SAAA7G,GAAA,IAAG8G,EAAH9G,EAAG8G,SAAUxG,EAAbN,EAAaM,MAAOgG,EAApBtG,EAAoBsG,KAAMpE,EAA1BlC,EAA0BkC,MAA1B,OACdX,EAAAd,EAAAC,cAAC+F,EAAAhG,EAAD,KACGqG,GAAYvF,EAAAd,EAAAC,cAAA,QAAMuD,KAAK,kBAAkB0C,QAASG,IACnDvF,EAAAd,EAAAC,cAAA,QAAMuD,KAAK,eAAe0C,QAAQ,wBAClCpF,EAAAd,EAAAC,cAAA,QAAMuD,KAAK,gBAAgB0C,QAASrG,IACpCiB,EAAAd,EAAAC,cAAA,QAAMuD,KAAK,sBAAsB0C,QAASL,IAC1C/E,EAAAd,EAAAC,cAAA,QAAMuD,KAAK,gBAAgB0C,QAASzE,IACpCX,EAAAd,EAAAC,cAAA,QAAMuD,KAAK,oBAAoB0C,QAASL,MAI7BO,IAEfA,EAAQD,aAnBa,CACnBE,SAAU,ICEZ,IAcMC,EAAM,SAAA/G,GAAgE,IAA7DM,EAA6DN,EAA7DM,MAAOgG,EAAsDtG,EAAtDsG,KAAMU,EAAgDhH,EAAhDgH,OAAQC,EAAwCjH,EAAxCiH,SAAU5G,EAA8BL,EAA9BK,KAAM6G,EAAwBlH,EAAxBkH,WAC1CC,EADkEC,EAAAlH,KAClEiH,KAqBNE,EAaEF,EAbFE,UAtBwEC,EAmCtEH,EAZFI,aACEC,EAxBsEF,EAwBtEE,QACAC,EAzBsEH,EAyBtEG,aACAC,EA1BsEJ,EA0BtEI,mBACAC,EA3BsEL,EA2BtEK,cACAC,EA5BsEN,EA4BtEM,SACAC,EA7BsEP,EA6BtEO,aACAC,EA9BsER,EA8BtEQ,WACAC,EA/BsET,EA+BtES,OACAC,EAhCsEV,EAgCtEU,QACAC,EAjCsEX,EAiCtEW,SAIEC,EAAM,CACV5H,MAAOA,GAASmH,EAChBhF,YAAa6D,GAAQoB,EACrBxF,MAAK,GAAKsF,GAAUR,GAAUW,GAC9BtF,IAAG,GAAKmF,GAAUP,GAAY,KAO1BkB,EAAmB,CACvBC,WAAY,oBACZC,QAAS,UACThG,IAAKmF,EACLI,WACAU,WAAYT,EACZU,iBAAkBf,EAClB/E,YAAaiF,EACbzD,KAAMwD,EACNM,OAAQ,CACNM,QAAS,SACTpE,KAAM8D,GAERS,gBAAiB,CACfH,QAAS,SACTpE,KAAM8D,GAERU,cAAe,OACfC,QAAS,CACPL,QAAS,SACTpE,KAAM8D,GAERY,UAAW,CACTN,QAAS,SACTpE,KAAM8D,GAERa,cAAe,4BACfC,aAAcxB,EACdnF,MAAO,CACLmG,QAAS,cACThG,IAAG,GAAKmF,EAAUG,IAMhBmB,EAAkB,CACtB,CACET,QAAS,WACTU,KAAM,CACJC,MAAOxB,EACPvD,KAAM,YAER2B,SAAU,GAEZ,CACEyC,QAAS,WACTU,KAAM,CACJC,MAAUxB,EAAV,SACAvD,KAAM,SAER2B,SAAU,GAEZ,CACEyC,QAAS,WACTU,KAAM,CACJC,MAAUxB,EAAV,YACAvD,KAAM,SAER2B,SAAU,GAEZ,CACEyC,QAAS,WACTU,KAAM,CACJC,MAAUxB,EAAV,aACAvD,KAAM,SAER2B,SAAU,IAIVqD,EAAgB,KAEhB/B,IACF+B,EAAgB,CACdb,WAAY,oBACZC,QAAS,UACTN,OAAQ,CACNM,QAAS,SACTpE,KAAM8D,GAERS,gBAAiB,CACfH,QAAS,SACTpE,KAAM8D,GAERU,cAAe,OACfC,QAAS,CACPL,QAAS,SACTpE,KAAM8D,GAERY,UAAW,CACTN,QAAS,eACTpE,KAAM8D,EACNvD,KAAM,CACJ6D,QAAS,cACThG,IAAG,GAAKmF,EAAUG,IAGtBiB,cAAevI,EAAOA,EAAK6I,UAAY,4BACvCL,aAAcxI,EAAOA,EAAK8I,aAAe,4BACzC1G,YAAayF,EAAIzF,YACjBmF,SAAUM,EAAI5H,MACdgI,WAAY,KACZjG,IAAK6F,EAAI7F,IACT4B,KAAMiE,EAAI5H,MACV4B,MAAO,CACLmG,QAAS,cACThG,IAAK6F,EAAIhG,OAEXqG,iBAAkBL,EAAI7F,KAGxByG,EAAgBM,KAAK,CACnBf,QAAS,WACTU,KAAM,CACJC,MAAOd,EAAI7F,IACX4B,KAAMiE,EAAI5H,OAEZsF,SAAU,KAId,IAAMyD,EAAa,CACjBjB,WAAY,oBACZC,QAAS,iBACT5F,YAAa,mBACbwB,KAAM,cACN6E,mBAGF,OACEvH,EAAAd,EAAAC,cAAAa,EAAAd,EAAA6I,SAAA,KACE/H,EAAAd,EAAAC,cAAC+F,EAAAhG,EAAD,CAAQH,MAAO4H,EAAI5H,OACjBiB,EAAAd,EAAAC,cAAA,QAAM6I,KAAM1B,IACZtG,EAAAd,EAAAC,cAAA,QAAMuD,KAAK,cAAc0C,QAASuB,EAAIzF,cACtClB,EAAAd,EAAAC,cAAA,QAAMuD,KAAK,QAAQ0C,QAASuB,EAAIhG,QAChCX,EAAAd,EAAAC,cAAA,QAAMuD,KAAK,iBAAiB0C,QAAQ,oCAElCO,GAAc3F,EAAAd,EAAAC,cAAA,UAAQ8F,KAAK,uBAAuBgD,KAAKC,UAAUtB,IAClEjB,GAAc3F,EAAAd,EAAAC,cAAA,UAAQ8F,KAAK,uBAAuBgD,KAAKC,UAAUR,IAClE1H,EAAAd,EAAAC,cAAA,UAAQ8F,KAAK,uBAAuBgD,KAAKC,UAAUJ,KAErD9H,EAAAd,EAAAC,cAACgJ,EAAD,CACEpD,KAAM4B,EAAIzF,YACVP,MAAOgG,EAAIhG,MACX5B,MAAO4H,EAAI5H,MACXkG,KAAMU,EAAa,UAAY,UAC/B7E,IAAK6F,EAAI7F,IACTkE,OAAQuB,EACR7D,KAAMgE,IAER1G,EAAAd,EAAAC,cAACiJ,EAAD,CAASrJ,MAAO4H,EAAI5H,MAAO4B,MAAOgG,EAAIhG,MAAOoE,KAAM4B,EAAIzF,YAAaqE,SAAUkB,MAKrEjB,MAEfA,EAAIH,aA5NiB,CACnBtG,MAAO,GACPgG,KAAM,GACNU,OAAQ,GACRC,SAAU,GACV5G,KAAM,CACJ8I,aAAc,GACdD,UAAW,IAEbhC,YAAY","file":"component---src-pages-about-tsx-c00ad0b3248ce07b649d.js","sourcesContent":["import React, { FunctionComponent } from 'react';\r\nimport { Layout } from '../components/layout';\r\nimport SEO from '../components/SEO';\r\nimport { graphql } from 'gatsby';\r\nimport {\r\n  TeamSection,\r\n  AchievementSection,\r\n  CustomerSection,\r\n  PartnerSection,\r\n  TryOutSection,\r\n} from '../components/sections';\r\n\r\nconst About: FunctionComponent<AboutProps> = ({ data }) => {\r\n  const { node } = data.allPrismicAbout.edges[0];\r\n  const { title, subtitle, achievement_header } = node.data;\r\n\r\n  return (\r\n    <Layout>\r\n      <SEO />\r\n      <TeamSection title={title.text} subtitle={subtitle.text} />\r\n      <AchievementSection title={achievement_header.text} />\r\n      <CustomerSection title=\"\" />\r\n      <PartnerSection />\r\n      <TryOutSection />\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport const query = graphql`\r\n  query About {\r\n    allPrismicAbout {\r\n      edges {\r\n        node {\r\n          lang\r\n          data {\r\n            title {\r\n              text\r\n            }\r\n            subtitle {\r\n              text\r\n            }\r\n            achievement_header {\r\n              text\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport default About;\r\n","import { Box } from '@cogito-study/alea';\r\nimport React, { FunctionComponent } from 'react';\r\n\r\nexport const Container: FunctionComponent = ({ children }) => {\r\n  return (\r\n    <Box px={[4, 4, 0]} mx=\"auto\" maxWidth={['100%', '640px', '640px', '1024px']}>\r\n      {children}\r\n    </Box>\r\n  );\r\n};\r\n","import { Flex, H3, Paragraph, Button, Box } from '@cogito-study/alea';\nimport { graphql, useStaticQuery } from 'gatsby';\nimport React from 'react';\n\nexport const FeatureSection = () => {\n  const data = useStaticQuery(graphql`\n    query Feature {\n      allPrismicHomeBodyFeature {\n        edges {\n          node {\n            primary {\n              image {\n                url\n                alt\n              }\n              title {\n                text\n              }\n              description {\n                text\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  if (!data.allPrismicHomeBodyFeature) return null;\n\n  return (\n    <Flex flexDirection=\"column\" alignItems={['center', 'center', 'space-between']} mx={[4, 4, 0, 7]}>\n      {data.allPrismicHomeBodyFeature.edges.map(({ node: { primary } }, index) => (\n        <Flex\n          key={index}\n          flexDirection={\n            index % 2 == 1 ? ['column', 'column', 'row-reverse', 'row-reverse'] : ['column', 'column', 'row', 'row']\n          }\n          alignItems={['center', 'center', 'space-between']}\n          justifyContent={['center', 'center', 'space-between']}\n          my={[6, 8, 7]}\n          width={['100%', '70%', '100%', '100%']}\n        >\n          {/* Width should be 300px on smaller screens and 400px on desktop on the image */}\n          <Box width={['300px', '300px', '300px', '400px']}>\n            {primary && primary.image && <img alt={primary.image.alt} src={primary.image.url} width=\"100%\" />}\n          </Box>\n          <Flex\n            flexDirection=\"column\"\n            justifyContent=\"center\"\n            maxWidth={['100%', '100%', '300px', '470px']}\n            ml={index % 2 == 1 ? [0] : [0, 0, 0, 9]}\n            mt={[4, 6, 7, 0]}\n          >\n            {primary && primary.title && (\n              <H3 my={3} color=\"grey.dark.3\">\n                {primary.title.text}\n              </H3>\n            )}\n            {primary && primary.description && <Paragraph color=\"grey.dark.3\">{primary.description.text}</Paragraph>}\n            <Button variant=\"secondary\" maxWidth=\"150px\" mt={4}>\n              learn more\n            </Button>\n          </Flex>\n        </Flex>\n      ))}\n    </Flex>\n  );\n};\n","import { Flex, H3, Paragraph, Button, Box } from '@cogito-study/alea';\nimport { graphql, useStaticQuery } from 'gatsby';\nimport React from 'react';\n\nexport const UseCaseSection = () => {\n  const data = useStaticQuery(graphql`\n    query UseCase {\n      allPrismicHomeBodyUseCase {\n        edges {\n          node {\n            primary {\n              description {\n                text\n              }\n              title {\n                text\n              }\n              icon {\n                url\n                alt\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  if (!data.allPrismicHomeBodyUseCase) return null;\n\n  return (\n    <Flex flexDirection=\"column\" alignItems=\"center\">\n      <Flex flexWrap=\"wrap\" width={['100%', '70%', '750px', '100%']} justifyContent=\"center\">\n        {data.allPrismicHomeBodyUseCase.edges.map(({ node: { primary } }, index) => (\n          <Flex\n            backgroundColor=\"white\"\n            key={index}\n            flexDirection=\"column\"\n            width={['100%', '100%', '210px', '260px']}\n            mx={[0, 2]}\n            my={3}\n            px={[2, 2, 2, 4]}\n            pb={[4, 4, 4, 6]}\n            pt={[2, 2, 2, 3]}\n            alignItems=\"start\"\n            justifyContent=\"space-between\"\n            border={2}\n            borderColor=\"primary.dark\"\n          >\n            <Flex flexDirection={['row', 'row', 'column']} alignItems={['center', 'center', 'start']}>\n              <Box minWidth=\"90px\" width={['90px', '90px', '90px', '110px']}>\n                {primary && primary.icon && <img alt={primary.icon.alt} src={primary.icon.url} width=\"100%\" />}\n              </Box>\n              <Flex height={'56px'} alignItems=\"center\">\n                {primary && primary.title && (\n                  <H3 my={1} mx={[2, 2, 2, 4]} color=\"primary.dark\">\n                    {primary.title.text}\n                  </H3>\n                )}\n              </Flex>\n            </Flex>\n            <Flex\n              mt={1}\n              px={[2, 2, 2, 4]}\n              flexDirection=\"column\"\n              height={['100%', '100%', '220px', '200px']}\n              justifyContent=\"space-between\"\n            >\n              <Flex flexDirection=\"column\">\n                {primary && primary.description && (\n                  <Paragraph my={2} color=\"grey.dark.3\">\n                    {primary.description.text}\n                  </Paragraph>\n                )}\n              </Flex>\n              <Button variant=\"secondary\" maxWidth=\"150px\" mt={4}>\n                learn more\n              </Button>\n            </Flex>\n          </Flex>\n        ))}\n      </Flex>\n      <Button variant=\"primary\" maxWidth=\"150px\" mt={4}>\n        try out!\n      </Button>\n    </Flex>\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport { Box, Button, H1, Flex, H4, TextInput, EmailIcon } from '@cogito-study/alea';\n\ninterface HeroSectionProps {\n  motto: string;\n  description: string;\n  subtitle: string;\n}\n\nexport const HeroSection: FunctionComponent<HeroSectionProps> = ({ motto, description, subtitle }) => (\n  <Flex flexDirection=\"column\" alignItems=\"center\" mt={[7, 10]} pt={7} mb={[2, 5]} mx={[0, 0, 0, 6]}>\n    <Flex flexDirection={['column', 'column', 'column', 'row']} mb={[3, 7]}>\n      <Box>\n        <H1 color=\"primary.dark\">{motto}</H1>\n      </Box>\n      <Flex flexDirection=\"column\" mt={[0, 0, 0, 4]}>\n        <Box>\n          <H4 color=\"grey.dark.3\">{description}</H4>\n          <Flex flexDirection={['column', 'row']}>\n            <TextInput\n              placeholder=\"Enter your e-mail\"\n              help='By clicking \"try out!\" your agree to our Privacy Policy.'\n              icon={<EmailIcon />}\n            />\n            <Button ml={[0, 4]} mt={[2, 0]} maxWidth=\"280px\">\n              try out!\n            </Button>\n          </Flex>\n        </Box>\n      </Flex>\n    </Flex>\n    <Box maxWidth=\"600px\">\n      <H4 mt={10} textAlign=\"center\" color=\"grey.dark.2\">\n        {subtitle}\n      </H4>\n    </Box>\n  </Flex>\n);\n","import React, { FunctionComponent } from 'react';\nimport { Flex, Box, H2, H4 } from '@cogito-study/alea';\nimport { useStaticQuery, graphql } from 'gatsby';\n\ninterface CustomerSectionProps {\n  title: string;\n}\n\nexport const CustomerSection: FunctionComponent<CustomerSectionProps> = ({ title }) => {\n  const data = useStaticQuery(graphql`\n    query Customer {\n      allPrismicHomeBodyCustomer {\n        edges {\n          node {\n            primary {\n              name {\n                text\n              }\n              icon {\n                url\n                alt\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  if (!data.allPrismicHomeBodyCustomer) return null;\n\n  return (\n    <Flex my={7} alignItems=\"center\" justifyContent=\"center\" flexDirection={['column', 'column', 'row']}>\n      <Box maxWidth={['260px', '360px']}>\n        <H2 color=\"grey.dark.1\" mb={[6, 8]}>\n          {title}\n        </H2>\n      </Box>\n      <Flex flexDirection={['row']} justifyContent=\"center\" alignItems=\"center\">\n        {data.allPrismicHomeBodyCustomer.edges.map(\n          ({ node: { primary } }, index) =>\n            primary &&\n            primary.name &&\n            primary.icon && (\n              <Flex width={['110px', '110px', '110px', '140px']} flexDirection=\"column\" mx={[5, 6]} alignItems=\"center\">\n                <img width=\"100%\" key={index} src={primary.icon.url}></img>\n                <H4 key={index} color=\"grey.dark.1\" textAlign=\"center\">\n                  {primary.name.text}\n                </H4>\n              </Flex>\n            ),\n        )}\n      </Flex>\n    </Flex>\n  );\n};\n","import { Anchor, Flex, Box } from '@cogito-study/alea';\nimport { graphql, useStaticQuery } from 'gatsby';\nimport React from 'react';\n\nexport const PartnerSection = () => {\n  const data = useStaticQuery(graphql`\n    query Partner {\n      allPrismicHomeBodyPartner {\n        edges {\n          node {\n            primary {\n              logo {\n                url\n                alt\n              }\n              link {\n                url\n              }\n              name {\n                text\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  if (!data.allPrismicHomeBodyPartner) return null;\n  return (\n    <Flex justifyContent=\"center\" py={4} backgroundColor=\"white\">\n      <Flex width={['300px', '100%']} justifyContent=\"center\" flexWrap=\"wrap\">\n        {data.allPrismicHomeBodyPartner.edges.map(({ node: { primary } }, index) => {\n          if (primary && primary.link && primary.name)\n            return (\n              <Anchor key={index} href={primary.link.url} mx={4}>\n                <Box width={['110px', '100px', '150px']}>\n                  <img width=\"100%\" src={primary.logo.url} alt={primary.name.text}></img>\n                </Box>\n              </Anchor>\n            );\n        })}\n      </Flex>\n    </Flex>\n  );\n};\n","import { Flex, H2, Paragraph, Button, TextInput, EmailIcon } from '@cogito-study/alea';\nimport { graphql, useStaticQuery } from 'gatsby';\nimport React from 'react';\nimport { Container } from '../container';\n\nexport const TryOutSection = () => {\n  const data = useStaticQuery(graphql`\n    query TryOut {\n      allPrismicHomeBodyTryOut {\n        edges {\n          node {\n            primary {\n              image {\n                url\n                alt\n              }\n              image_description {\n                text\n              }\n              subtitle {\n                text\n              }\n              title {\n                text\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  if (!data.allPrismicHomeBodyTryOut) return null;\n\n  return (\n    <Flex bg=\"primary.dark\">\n      {data.allPrismicHomeBodyTryOut.edges.map(({ node: { primary } }) => {\n        if (primary) {\n          const { image, image_description, subtitle, title } = primary;\n          return (\n            <Container>\n              <Flex\n                width=\"100%\"\n                flexDirection={['column', 'column', 'column', 'row']}\n                my={7}\n                justifyContent=\"center\"\n                alignItems=\"center\"\n              >\n                <Flex flexDirection=\"column\" maxWidth=\"300px\" mb={[7, 7, 7, 0]} mr={[0, 0, 0, 8]}>\n                  {image && image.url && <img src={image.url} alt={image.alt || ''} />}\n                  {image_description && (\n                    <Paragraph my={1} color=\"grey.light.4\" textAlign=\"center\" mt={3}>\n                      {image_description.text}\n                    </Paragraph>\n                  )}\n                </Flex>\n                <Flex flexDirection=\"column\" maxWidth=\"420px\" mx={3}>\n                  {title && (\n                    <H2 my={2} color=\"grey.light.4\">\n                      {title.text}\n                    </H2>\n                  )}\n                  {subtitle && (\n                    <Paragraph mb={3} color=\"grey.light.4\">\n                      {subtitle.text}\n                    </Paragraph>\n                  )}\n                  <Flex mt={2} flexDirection={['column', 'row']}>\n                    <TextInput\n                      placeholder=\"Enter your e-mail\"\n                      help='By clicking \"try out!\" your agree to our Privacy Policy.'\n                      icon={<EmailIcon />}\n                    />\n                    <Button ml={[0, 4]} mt={[2, 0]} maxWidth=\"280px\">\n                      try out!\n                    </Button>\n                  </Flex>\n                </Flex>\n              </Flex>\n            </Container>\n          );\n        }\n      })}\n    </Flex>\n  );\n};\n","import { Box, Flex, H2, H3, Paragraph } from '@cogito-study/alea';\nimport { graphql, useStaticQuery } from 'gatsby';\nimport React, { FunctionComponent } from 'react';\nimport { Container } from '../container';\n\ninterface AchievementSectionProps {\n  title: string;\n}\n\nexport const AchievementSection: FunctionComponent<AchievementSectionProps> = ({ title }) => {\n  const data = useStaticQuery(graphql`\n    query Achievement {\n      allPrismicAboutBodyAchievements {\n        edges {\n          node {\n            primary {\n              name {\n                text\n              }\n              description {\n                text\n              }\n              icon {\n                url\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  if (!data.allPrismicAboutBodyAchievements) return null;\n\n  return (\n    <Container>\n      <H2 color=\"grey.dark.3\" mt={9} mb={7}>\n        {title}\n      </H2>\n      {data.allPrismicAboutBodyAchievements.edges.map(({ node: { primary } }, index) => (\n        <Flex flexDirection={['column', 'row']} alignItems=\"center\" mb={7} key={index}>\n          <Box order={[2, 0]} maxWidth=\"600px\">\n            <H3 color=\"grey.dark.2\" mt={0} mb={5}>\n              {primary.name.text}\n            </H3>\n            <Paragraph color=\"grey.dark.2\" mt={0} paragraphSize=\"medium\">\n              {primary.description.text}\n            </Paragraph>\n          </Box>\n          {primary.icon.url && (\n            <Box order={[1, 0]} ml={[0, 9]} width=\"180px\" height=\"180px\">\n              <img src={primary.icon.url} />\n            </Box>\n          )}\n        </Flex>\n      ))}\n    </Container>\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport { Box, H1, H2, H3, Grid, Paragraph } from '@cogito-study/alea';\nimport { graphql, useStaticQuery } from 'gatsby';\nimport { Container } from '../container';\n\ninterface TeamSectionProps {\n  title: string;\n  subtitle: string;\n}\n\nexport const TeamSection: FunctionComponent<TeamSectionProps> = ({ title, subtitle }) => {\n  const data = useStaticQuery(graphql`\n    query Team {\n      allPrismicAboutBodyProfile {\n        edges {\n          node {\n            primary {\n              image {\n                url\n              }\n              name {\n                text\n              }\n              position {\n                text\n              }\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  if (!data.allPrismicAboutBodyProfile) return null;\n\n  return (\n    <Container>\n      <H1 color=\"primary.dark\">{title}</H1>\n      <H2 color=\"grey.dark.3\">{subtitle}</H2>\n      <Grid gridGap={5} gridTemplateColumns={['1fr 1fr', '1fr 1fr 1fr 1fr', '1fr 1fr 1fr 1fr', '1fr 1fr 1fr']}>\n        {data.allPrismicAboutBodyProfile.edges.map(({ node: { primary } }, index) => (\n          <Box key={index}>\n            <Box height={['140px', '140px', '140px', '300px']}>\n              <img src={primary.image.url} width=\"100%\" height=\"100%\" style={{ objectFit: 'cover' }} />\n            </Box>\n            <H3 mb={1} mt={2} color=\"primary.dark\">\n              {primary.name.text}\n            </H3>\n            <Paragraph mb={6} mt={0} color=\"grey.normal\">\n              {primary.position.text}\n            </Paragraph>\n          </Box>\n        ))}\n      </Grid>\n    </Container>\n  );\n};\n","export * from './feature.section';\nexport * from './use-case.section';\nexport * from './hero.section';\nexport * from './customer.section';\nexport * from './partner.section';\nexport * from './try-out.section';\nexport * from './achievement.section';\nexport * from './team.section';\n","import React from 'react';\r\nimport Helmet from 'react-helmet';\r\n\r\nconst defaultProps = {\r\n  name: '',\r\n  type: 'website',\r\n};\r\n\r\ntype Props = { url: string; title: string; desc: string; image: string; locale: string } & typeof defaultProps;\r\n\r\nconst Facebook = ({ url, title, desc, image, locale, name, type }: Props) => (\r\n  <Helmet>\r\n    {name && <meta property=\"og:site_name\" content={name} />}\r\n    <meta property=\"og:locale\" content={locale} />\r\n    <meta property=\"og:url\" content={url} />\r\n    <meta property=\"og:type\" content={type} />\r\n    <meta property=\"og:title\" content={title} />\r\n    <meta property=\"og:description\" content={desc} />\r\n    <meta property=\"og:image\" content={image} />\r\n    <meta property=\"og:image:alt\" content={desc} />\r\n  </Helmet>\r\n);\r\n\r\nFacebook.defaultProps = defaultProps;\r\n\r\nexport default Facebook;\r\n","import React from 'react'\r\nimport Helmet from 'react-helmet'\r\n\r\nconst defaultProps = {\r\n  username: '',\r\n}\r\n\r\ntype Props = { title: string; desc: string; image: string } & typeof defaultProps\r\n\r\nconst Twitter = ({ username, title, desc, image }: Props) => (\r\n  <Helmet>\r\n    {username && <meta name=\"twitter:creator\" content={username} />}\r\n    <meta name=\"twitter:card\" content=\"summary_large_image\" />\r\n    <meta name=\"twitter:title\" content={title} />\r\n    <meta name=\"twitter:description\" content={desc} />\r\n    <meta name=\"twitter:image\" content={image} />\r\n    <meta name=\"twitter:image:alt\" content={desc} />\r\n  </Helmet>\r\n)\r\n\r\nexport default Twitter\r\n\r\nTwitter.defaultProps = defaultProps\r\n","import React from 'react';\r\nimport Helmet from 'react-helmet';\r\nimport { useStaticQuery, graphql } from 'gatsby';\r\nimport Facebook from './facebook';\r\nimport Twitter from './twitter';\r\n\r\nconst defaultProps = {\r\n  title: '',\r\n  desc: '',\r\n  banner: '',\r\n  pathname: '',\r\n  node: {\r\n    modifiedTime: '',\r\n    birthTime: '',\r\n  },\r\n  individual: false,\r\n};\r\n\r\ntype Props = {} & typeof defaultProps;\r\n\r\nconst SEO = ({ title, desc, banner, pathname, node, individual }: Props) => {\r\n  const { site } = useStaticQuery(graphql`\r\n    query SEO {\r\n      site {\r\n        buildTime(formatString: \"YYYY-MM-DD\")\r\n        siteMetadata {\r\n          siteUrl\r\n          defaultTitle: titleAlt\r\n          defaultDescription: description\r\n          defaultBanner: logo\r\n          headline\r\n          siteLanguage\r\n          ogLanguage\r\n          author\r\n          twitter\r\n          facebook\r\n        }\r\n      }\r\n    }\r\n  `);\r\n\r\n  const {\r\n    buildTime,\r\n    siteMetadata: {\r\n      siteUrl,\r\n      defaultTitle,\r\n      defaultDescription,\r\n      defaultBanner,\r\n      headline,\r\n      siteLanguage,\r\n      ogLanguage,\r\n      author,\r\n      twitter,\r\n      facebook,\r\n    },\r\n  } = site;\r\n\r\n  const seo = {\r\n    title: title || defaultTitle,\r\n    description: desc || defaultDescription,\r\n    image: `${siteUrl}${banner || defaultBanner}`,\r\n    url: `${siteUrl}${pathname || ''}`,\r\n  };\r\n\r\n  // schema.org in JSONLD format\r\n  // https://developers.google.com/search/docs/guides/intro-structured-data\r\n  // You can fill out the 'author', 'creator' with more data or another type (e.g. 'Organization')\r\n\r\n  const schemaOrgWebPage = {\r\n    '@context': 'http://schema.org',\r\n    '@type': 'WebPage',\r\n    url: siteUrl,\r\n    headline,\r\n    inLanguage: siteLanguage,\r\n    mainEntityOfPage: siteUrl,\r\n    description: defaultDescription,\r\n    name: defaultTitle,\r\n    author: {\r\n      '@type': 'Person',\r\n      name: author,\r\n    },\r\n    copyrightHolder: {\r\n      '@type': 'Person',\r\n      name: author,\r\n    },\r\n    copyrightYear: '2019',\r\n    creator: {\r\n      '@type': 'Person',\r\n      name: author,\r\n    },\r\n    publisher: {\r\n      '@type': 'Person',\r\n      name: author,\r\n    },\r\n    datePublished: '2019-03-10T10:30:00+01:00',\r\n    dateModified: buildTime,\r\n    image: {\r\n      '@type': 'ImageObject',\r\n      url: `${siteUrl}${defaultBanner}`,\r\n    },\r\n  };\r\n\r\n  // Initial breadcrumb list\r\n\r\n  const itemListElement = [\r\n    {\r\n      '@type': 'ListItem',\r\n      item: {\r\n        '@id': siteUrl,\r\n        name: 'Homepage',\r\n      },\r\n      position: 1,\r\n    },\r\n    {\r\n      '@type': 'ListItem',\r\n      item: {\r\n        '@id': `${siteUrl}/about`,\r\n        name: 'About',\r\n      },\r\n      position: 2,\r\n    },\r\n    {\r\n      '@type': 'ListItem',\r\n      item: {\r\n        '@id': `${siteUrl}/projects`,\r\n        name: 'About',\r\n      },\r\n      position: 3,\r\n    },\r\n    {\r\n      '@type': 'ListItem',\r\n      item: {\r\n        '@id': `${siteUrl}/instagram`,\r\n        name: 'About',\r\n      },\r\n      position: 4,\r\n    },\r\n  ];\r\n\r\n  let schemaArticle = null;\r\n\r\n  if (individual) {\r\n    schemaArticle = {\r\n      '@context': 'http://schema.org',\r\n      '@type': 'Article',\r\n      author: {\r\n        '@type': 'Person',\r\n        name: author,\r\n      },\r\n      copyrightHolder: {\r\n        '@type': 'Person',\r\n        name: author,\r\n      },\r\n      copyrightYear: '2019',\r\n      creator: {\r\n        '@type': 'Person',\r\n        name: author,\r\n      },\r\n      publisher: {\r\n        '@type': 'Organization',\r\n        name: author,\r\n        logo: {\r\n          '@type': 'ImageObject',\r\n          url: `${siteUrl}${defaultBanner}`,\r\n        },\r\n      },\r\n      datePublished: node ? node.birthTime : '2019-03-10T10:30:00+01:00',\r\n      dateModified: node ? node.modifiedTime : '2019-03-10T10:30:00+01:00',\r\n      description: seo.description,\r\n      headline: seo.title,\r\n      inLanguage: 'en',\r\n      url: seo.url,\r\n      name: seo.title,\r\n      image: {\r\n        '@type': 'ImageObject',\r\n        url: seo.image,\r\n      },\r\n      mainEntityOfPage: seo.url,\r\n    };\r\n    // Push current blogpost into breadcrumb list\r\n    itemListElement.push({\r\n      '@type': 'ListItem',\r\n      item: {\r\n        '@id': seo.url,\r\n        name: seo.title,\r\n      },\r\n      position: 5,\r\n    });\r\n  }\r\n\r\n  const breadcrumb = {\r\n    '@context': 'http://schema.org',\r\n    '@type': 'BreadcrumbList',\r\n    description: 'Breadcrumbs list',\r\n    name: 'Breadcrumbs',\r\n    itemListElement,\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Helmet title={seo.title}>\r\n        <html lang={siteLanguage} />\r\n        <meta name=\"description\" content={seo.description} />\r\n        <meta name=\"image\" content={seo.image} />\r\n        <meta name=\"gatsby-starter\" content=\"Gatsby Starter Portfolio Jodie\" />\r\n        {/* Insert schema.org data conditionally (webpage/article) + everytime (breadcrumbs) */}\r\n        {!individual && <script type=\"application/ld+json\">{JSON.stringify(schemaOrgWebPage)}</script>}\r\n        {individual && <script type=\"application/ld+json\">{JSON.stringify(schemaArticle)}</script>}\r\n        <script type=\"application/ld+json\">{JSON.stringify(breadcrumb)}</script>\r\n      </Helmet>\r\n      <Facebook\r\n        desc={seo.description}\r\n        image={seo.image}\r\n        title={seo.title}\r\n        type={individual ? 'article' : 'website'}\r\n        url={seo.url}\r\n        locale={ogLanguage}\r\n        name={facebook}\r\n      />\r\n      <Twitter title={seo.title} image={seo.image} desc={seo.description} username={twitter} />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SEO;\r\n\r\nSEO.defaultProps = defaultProps;\r\n"],"sourceRoot":""}